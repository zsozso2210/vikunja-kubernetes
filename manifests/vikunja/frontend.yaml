apiVersion: apps/v1
kind: Deployment
metadata:
  name: vikunja-frontend
  labels:
    app.kubernetes.io/instance: vikunja
    app.kubernetes.io/name: vikunja
spec:
  replicas: 2
  podDisruptionBudget:
    enabled: true
    minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: frontend
      app.kubernetes.io/instance: vikunja
      app.kubernetes.io/name: vikunja
  template:
    metadata:
      labels:
        app.kubernetes.io/component: frontend
        app.kubernetes.io/instance: vikunja
        app.kubernetes.io/name: vikunja
    spec:
      containers:
      - env:
          - name: VIKUNJA_API_URL
            value: http://vikunja-backend:3456
          - name: VIKUNJA_HTTP_PORT
            value: '8080'
      - name: vikunja-frontend
        image: vikunja/frontend:latest
        imagePullPolicy: IfNotPresent
        
        resources:
          limits:
            cpu: "1"
            memory: "512Mi"
          resquests:
            cpu: "0.5"
            memory: "256Mi"
        ports:
          - containerPort: 8080
            name: http
            protocol: TCP
        # it disables liveness and readiness checks until it succeeds
        startupProbe: 
          failureThreshold: 30
          initialDelaySeconds: 0
          periodSeconds: 5
          tcpSocket:
            port: 8080
        # Readiness and liveness probes can be used in parallel for the same container
        # Ready to start accepting traffic
        readinessProbe:
          initialDelaySeconds: 0
          tcpSocket:
            port: 8080
        # Kubelet uses liveness probes to know when to restart a container
        livenessProbe:
          initialDelaySeconds: 10
          tcpSocket:
            port: 8080
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          fsGroup: 1000
          # the container is started with a non-root user ID (UID) instead of the default root user ID
          runAsNonRoot: true 
          allowPrivilegeEscalation: false
          # prevent write access to a container's root filesystem
          readOnlyRootFilesystem: true

          capabilities:
            add:
              - NET_BIND_SERVICE
            drop:
              - ALL
          volumeMounts:
            - mountPath: /tmp
              name: tmp
      serviceAccountName: vikunja
      volumes:
        - emptyDir: {}
          name: tmp

